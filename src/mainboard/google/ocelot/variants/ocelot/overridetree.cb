fw_config
	field AUDIO 0 1
		option AUDIO_NONE		0
		option AUDIO_ALC721_SNDW	1
		option AUDIO_ALC256_HDA		2
	end
	field WIFI 2 4
		option WIFI_NONE		0
		option WIFI_CNVI_6		1
		option WIFI_PCIE_6		2
		option WIFI_CNVI_7		3
		option WIFI_PCIE_7		4
	end
	field CELLULAR 5 6
		option CELLULAR_ABSENT		0
		option CELLULAR_USB		1
		option CELLULAR_PCIE		2
	end
	field TOUCHSCREEN 7 8
		option TOUCHSCREEN_NONE		0
		option TOUCHSCREEN_THC_SPI	1
		option TOUCHSCREEN_THC_I2C	2
	end
	field TOUCHPAD 9 10
		option TOUCHPAD_NONE		0
		option TOUCHPAD_THC_I2C		1
		option TOUCHPAD_LPSS_I2C	2
	end
	field SD 11 12
		option SD_NONE			0
		option SD_GENSYS		1
		option SD_BAYHUB		2
	end
	field STORAGE 13 14
		option STORAGE_UNKNOWN		0
		option STORAGE_NVME_GEN4	1
		option STORAGE_NVME_GEN5	2
		option STORAGE_UFS		3
	end
	field FP 15
		option FP_ABSENT		0
		option FP_PRESENT		1
	end
	field DISPLAY 16 17
		option DISPLAY_ABSENT		0
		option DISPLAY_TOUCH_PRESENT	1
		option DISPLAY_NO_TOUCH_PRESENT	2
	end
	field ISH 18
		option ISH_DISABLE		0
		option ISH_ENABLE		1
	end
	field KB 19
		option KB_ABSENT		0
		option KB_PRESENT		1
	end
	field PSU 20
		option PSU_USBC			0
		option PSU_BJ			1
	end
end

chip soc/intel/pantherlake

	register "usb2_ports[0]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C0
	register "usb2_ports[1]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C1
	register "usb2_ports[2]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C2
	register "usb2_ports[3]" = "USB2_PORT_TYPE_C(OC_SKIP)" # USB2_C3
	register "usb2_ports[4]" = "USB2_PORT_MID(OC0)" # Type-A Port A0
	register "usb2_ports[5]" = "USB2_PORT_MID(OC0)" # Type-A Port A1 / WWAN with rework
	register "usb2_ports[7]" = "USB2_PORT_MID(OC_SKIP)" # Discrete Bluetooth

	register "usb3_ports[0]" = "USB3_PORT_DEFAULT(OC0)" # USB3.2 x1 Type-A Con #1
	register "usb3_ports[1]" = "USB3_PORT_DEFAULT(OC0)" # USB3.2 x1 Type-A Con #2 / M.2 WWAN with rework

	register "tcss_ports[0]" = "TCSS_PORT_DEFAULT(OC_SKIP)"
	register "tcss_ports[1]" = "TCSS_PORT_DEFAULT(OC_SKIP)"
	register "tcss_ports[2]" = "TCSS_PORT_DEFAULT(OC_SKIP)"
	register "tcss_ports[3]" = "TCSS_PORT_DEFAULT(OC_SKIP)"

	register "tcss_cap_policy[0]" = "TCSS_TYPE_C_PORT_FULL_FUN"
	register "tcss_cap_policy[1]" = "TCSS_TYPE_C_PORT_FULL_FUN"
	register "tcss_cap_policy[2]" = "TCSS_TYPE_C_PORT_FULL_FUN"
	register "tcss_cap_policy[3]" = "TCSS_TYPE_C_PORT_FULL_FUN"

	# Enable EDP in PortA
	register "ddi_port_A_config" = "1"
	register "ddi_ports_config" = "{
                [DDI_PORT_A] = DDI_ENABLE_HPD,
        }"

	register "serial_io_i2c_mode" = "{
		[PchSerialIoIndexI2C0]  = PchSerialIoPci,
		[PchSerialIoIndexI2C1]  = PchSerialIoPci,
		[PchSerialIoIndexI2C2]  = PchSerialIoPci,
		[PchSerialIoIndexI2C3]  = PchSerialIoPci,
		[PchSerialIoIndexI2C4]  = PchSerialIoPci,
		[PchSerialIoIndexI2C5]  = PchSerialIoPci,
	}"

	register "serial_io_gspi_mode" = "{
		[PchSerialIoIndexGSPI0] = PchSerialIoPci,
		[PchSerialIoIndexGSPI1] = PchSerialIoDisabled,
		[PchSerialIoIndexGSPI0A] = PchSerialIoDisabled,
	}"

	# Intel Common SoC Config
	#+-------------------+---------------------------+
	#| Field             |  Value                    |
	#+-------------------+---------------------------+
	#| I2C1              | Camera(CRD1)              |
	#| I2C2              | Camera(CRD2)              |
	#| I2C3              | Audio, TPM(cr50)          |
	#| I2C4              | Touchscreen               |
	#| I2C5              | Touchpad                  |
	#+-------------------+---------------------------+
	register "common_soc_config" = "{
		.chipset_lockdown = CHIPSET_LOCKDOWN_COREBOOT,
		.i2c[1] = {
			.speed = I2C_SPEED_FAST,
		},
		.i2c[2] = {
			.speed = I2C_SPEED_FAST,
		},
		.i2c[3] = {
			.early_init = 1,
			.speed = I2C_SPEED_FAST,
		},
		.i2c[4] = {
			.speed = I2C_SPEED_FAST,
		},
		.i2c[5] = {
			.speed = I2C_SPEED_FAST,
		},
	}"

	device domain 0 on
		device ref igpu on
			probe DISPLAY DISPLAY_TOUCH_PRESENT
			probe DISPLAY DISPLAY_NO_TOUCH_PRESENT
			chip drivers/gfx/generic
				register "device_count" = "5"
				# DDIA for eDP
				register "device[0].name" = ""LCD0""
				register "device[0].type" = "panel"
				# DDIB for HDMI
				# If HDMI is not enumerated in the kernel, then no GFX device should be added for DDIB
				register "device[1].name" = ""DD01""
				# TCP0 (DP-1) for port C0
				register "device[2].name" = ""DD02""
				register "device[2].use_pld" = "true"
				register "device[2].pld" = "ACPI_PLD_TYPE_C(LEFT, LEFT, ACPI_PLD_GROUP(1, 1))"
				# TCP1 (DP-2) for port C1
				register "device[3].name" = ""DD03""
				register "device[3].use_pld" = "true"
				register "device[3].pld" = "ACPI_PLD_TYPE_C(LEFT, RIGHT, ACPI_PLD_GROUP(2, 1))"
				# TCP2 (DP-3) for port C2
				register "device[4].name" = ""DD04""
				register "device[4].use_pld" = "true"
				register "device[4].pld" = "ACPI_PLD_TYPE_C(RIGHT, LEFT, ACPI_PLD_GROUP(3, 1))"
				device generic 0 on end
			end
		end

		device ref dtt on
			chip drivers/intel/dptf
				## sensor information
				register "options.tsr[0].desc" = ""DDR_SOC""
				register "options.tsr[1].desc" = ""Ambient""
				register "options.tsr[2].desc" = ""Charger""
				register "options.tsr[3].desc" = ""wwan""

				## Active Policy
				# FIXME: below values are initial reference values only
				register "policies.active" = "{
						[0] = {
							.target = DPTF_TEMP_SENSOR_0,
							.thresholds = {
									TEMP_PCT(70, 97),
									TEMP_PCT(65, 90),
									TEMP_PCT(60, 80),
									TEMP_PCT(55, 75),
									TEMP_PCT(50, 65),
									TEMP_PCT(45, 45),
									TEMP_PCT(43, 30),
								}
							},
						[1] = {
							.target = DPTF_TEMP_SENSOR_1,
							.thresholds = {
									TEMP_PCT(70, 97),
									TEMP_PCT(65, 90),
									TEMP_PCT(60, 80),
									TEMP_PCT(55, 75),
									TEMP_PCT(50, 65),
									TEMP_PCT(45, 45),
									TEMP_PCT(43, 30),
								}
							},
						[2] = {
							.target = DPTF_TEMP_SENSOR_2,
							.thresholds = {
									TEMP_PCT(75, 90),
									TEMP_PCT(70, 80),
									TEMP_PCT(65, 70),
									TEMP_PCT(60, 50),
								}
							},
						[3] = {
							.target = DPTF_TEMP_SENSOR_3,
							.thresholds = {
									TEMP_PCT(75, 90),
									TEMP_PCT(70, 80),
									TEMP_PCT(65, 70),
									TEMP_PCT(60, 60),
									TEMP_PCT(55, 50),
									TEMP_PCT(50, 40),
									TEMP_PCT(45, 30),
								}
							}
				}"

				## Passive Policy
				# TODO: below values are initial reference values only
				register "policies.passive" = "{
						[0] = DPTF_PASSIVE(CPU,         CPU,           95, 5000),
						[1] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_0, 80, 5000),
						[2] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_1, 80, 5000),
						[3] = DPTF_PASSIVE(CHARGER,     TEMP_SENSOR_2, 75, 5000),
						[4] = DPTF_PASSIVE(CPU,         TEMP_SENSOR_3, 80, 5000),
				}"

				## Critical Policy
				# TODO: below values are initial reference values only
				register "policies.critical" = "{
						[0] = DPTF_CRITICAL(CPU,          105, SHUTDOWN),
						[1] = DPTF_CRITICAL(TEMP_SENSOR_0, 85, SHUTDOWN),
						[2] = DPTF_CRITICAL(TEMP_SENSOR_1, 85, SHUTDOWN),
						[3] = DPTF_CRITICAL(TEMP_SENSOR_2, 85, SHUTDOWN),
						[4] = DPTF_CRITICAL(TEMP_SENSOR_3, 85, SHUTDOWN),
				}"

				## Power Limits Control
				register "controls.power_limits" = "{
						.pl1 = {
							.min_power = 25000,
							.max_power = 25000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 200,
						},
						.pl2 = {
							.min_power = 95000,
							.max_power = 95000,
							.time_window_min = 28 * MSECS_PER_SEC,
							.time_window_max = 32 * MSECS_PER_SEC,
							.granularity = 1000,
						}
				}"

				## Charger Performance Control (Control, mA)
				register "controls.charger_perf" = "{
						[0] = { 255, 3000 },
						[1] = {  24, 1500 },
						[2] = {  16, 1000 },
						[3] = {   8,  500 }
				}"

				## Fan Performance Control (Percent, Speed, Noise, Power)
				register "controls.fan_perf" = "{
						[0] = {  90, 6700, 220, 2200, },
						[1] = {  80, 5800, 180, 1800, },
						[2] = {  70, 5000, 145, 1450, },
						[3] = {  60, 4900, 115, 1150, },
						[4] = {  50, 3838,  90,  900, },
						[5] = {  40, 2904,  55,  550, },
						[6] = {  30, 2337,  30,  300, },
						[7] = {  20, 1608,  15,  150, },
						[8] = {  10,  800,  10,  100, },
						[9] = {   0,    0,   0,   50, }
				}"

				## Fan options
				register "options.fan.fine_grained_control" = "true"
				register "options.fan.step_size" = "2"

				device generic 0 alias dptf_policy on end
			end
		end

		device ref iaa off end

		device ref thc0 on
			register "thc_wake_on_touch[0]" = "true"
			probe TOUCHSCREEN TOUCHSCREEN_THC_SPI
			probe TOUCHSCREEN TOUCHSCREEN_THC_I2C
			# THC0 is function 0; hence it needs to be enabled when THC1 is to be enabled.
			probe TOUCHPAD TOUCHPAD_THC_I2C
			chip drivers/intel/touch
				register "name" = "INTEL_THC0_NAME"
				register "mode" = "THC_HID_I2C_MODE"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_F08)"
				register "enable_delay_ms" = "2"
				register "enable_off_delay_ms" = "2"
				register "wake_on_touch" = "true"
				# NOTE: Use GpioInt() in _CRS and does not use GPE.
				register "wake_gpio" = "ACPI_GPIO_IRQ_LEVEL_LOW_WAKE(GPP_VGPIO3_THC0)"
				register "active_ltr" = "1"
				register "idle_ltr" = "0"
				register "connected_device" = "TH_SENSOR_ELAN"
				register "add_acpi_dma_property" = "true"
				device generic 0 alias touch_0_i2c_elan on
					probe TOUCHSCREEN TOUCHSCREEN_THC_I2C
				end
			end
			chip drivers/intel/touch
				register "name" = "INTEL_THC0_NAME"
				register "mode" = "THC_HID_SPI_MODE"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_F08)"
				register "enable_delay_ms" = "2"
				register "enable_off_delay_ms" = "2"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_E16)"
				register "reset_delay_ms" = "10"
				register "reset_off_delay_ms" = "2"
				register "wake_on_touch" = "true"
				# NOTE: Use GpioInt() in _CRS and does not use GPE.
				register "wake_gpio" = "ACPI_GPIO_IRQ_LEVEL_LOW_WAKE(GPP_VGPIO3_THC0)"
				register "active_ltr" = "1"
				register "idle_ltr" = "0"
				register "connected_device" = "TH_SENSOR_ELAN"
				register "soc_hidspi.write_mode" = "HIDSPI_WRITE_MODE_MULTI_SINGLE_SPI"
				register "soc_hidspi.reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_E16)"
				register "add_acpi_dma_property" = "true"
				device generic 0 alias touch_0_spi_elan on
					probe TOUCHSCREEN TOUCHSCREEN_THC_SPI
				end
			end
		end
		device ref thc1 on
			register "thc_wake_on_touch[1]" = "true"
			probe TOUCHPAD TOUCHPAD_THC_I2C
			chip drivers/intel/touch
				register "name" = "INTEL_THC1_NAME"
				register "mode" = "THC_HID_I2C_MODE"
				register "wake_on_touch" = "true"
				# NOTE: Use GpioInt() in _CRS and does not use GPE.
				register "wake_gpio" = "ACPI_GPIO_IRQ_LEVEL_LOW_WAKE(GPP_VGPIO3_THC1)"
				register "active_ltr" = "1"
				register "idle_ltr" = "0"
				register "connected_device" = "TH_SENSOR_HYNITRON"
				register "add_acpi_dma_property" = "true"
				device generic 0 alias touch_1_i2c_hynitron on end
			end
		end

		device ref tbt_pcie_rp0 on end
		device ref tbt_pcie_rp1 on end
		device ref tcss_xhci on
			chip drivers/usb/acpi
				device ref tcss_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C0""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(4, 2)"
						device ref tcss_usb3_port0 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-C Port C1""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(3, 2)"
						device ref tcss_usb3_port1 on end
					end
				end
			end
		end

		device ref tcss_dma0 on
			chip drivers/intel/usb4/retimer
				register "dfp[0].power_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B21)"
				use tcss_usb3_port0 as dfp[0].typec_port
				device generic 0 on end
			end
			chip drivers/intel/usb4/retimer
				register "dfp[1].power_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B21)"
				use tcss_usb3_port1 as dfp[1].typec_port
				device generic 0 on end
			end
		end

		device ref ish on
			probe ISH ISH_ENABLE
			probe FP FP_PRESENT
			chip drivers/intel/ish
				register "add_acpi_dma_property" = "true"
				device generic 0 on end
			end
		end

		device ref xhci on
			chip drivers/usb/acpi
				device ref xhci_root_hub on
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C0""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(1, 1)"
						device ref usb2_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C1""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(2, 1)"
						device ref usb2_port2 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C2""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(3, 1)"
						device ref usb2_port3 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-C Port C3""
						register "type" = "UPC_TYPE_C_USB2_SS_SWITCH"
						register "group" = "ACPI_PLD_GROUP(4, 1)"
						device ref usb2_port4 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port 1""
						register "type" = "UPC_TYPE_A"
						register "group" = "ACPI_PLD_GROUP(5, 1)"
						device ref usb2_port5 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port 2""
						register "type" = "UPC_TYPE_A"
						register "group" = "ACPI_PLD_GROUP(6, 1)"
						device ref usb2_port6 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Type-A Port 3""
						register "type" = "UPC_TYPE_A"
						register "group" = "ACPI_PLD_GROUP(7, 1)"
						device ref usb2_port7 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB2 Bluetooth""
						register "type" = "UPC_TYPE_INTERNAL"
						register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_A16)"
						device ref usb2_port8 on
							probe WIFI WIFI_PCIE_6
							probe WIFI WIFI_PCIE_7
						end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port 1""
						register "type" = "UPC_TYPE_USB3_A"
						register "group" = "ACPI_PLD_GROUP(1, 2)"
						device ref usb3_port1 on end
					end
					chip drivers/usb/acpi
						register "desc" = ""USB3 Type-A Port 2""
						register "type" = "UPC_TYPE_USB3_A"
						register "group" = "ACPI_PLD_GROUP(2, 2)"
						device ref usb3_port2 on end
					end
				end
			end
		end

		device ref ufs on
			probe STORAGE STORAGE_UFS
			probe STORAGE STORAGE_UNKNOWN
		end

		device ref pcie_rp2 on
			probe CELLULAR CELLULAR_PCIE
			register "pcie_rp[PCIE_RP(2)]" = "{
				.clk_src = 5,
				.clk_req = 5,
				.flags = PCIE_RP_CLK_REQ_DETECT | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_D03)"
				register "reset_off_delay_ms" = "20"
				register "srcclk_pin" = "5"
				register "ext_pm_support" = "ACPI_PCIE_RP_EMIT_ALL"
				register "skip_on_off_support" = "true"
				register "use_rp_mutex" = "true"
				device generic 0 alias rp2_rtd3 on end
			end
			chip drivers/wwan/fm
				register "fcpo_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_A09)"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_B20)"
				register "perst_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_D03)"
				register "wake_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_E02)"
				register "add_acpi_dma_property" = "true"
				use rp2_rtd3 as rtd3dev
				device generic 0 on end
			end
		end # WWAN
		device ref pcie_rp3 on
			probe SD SD_GENSYS
			probe SD SD_BAYHUB
			# Enable PCH PCIE x1 slot using CLK 3
			register "pcie_rp[PCIE_RP(3)]" = "{
				.clk_src = 2,
				.clk_req = 2,
				.flags = PCIE_RP_CLK_REQ_DETECT | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_A08)"
				register "enable_delay_ms" = "100"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_D19)"
				register "reset_delay_ms" = "20"
				register "srcclk_pin" = "2"
				device generic 0 on end
			end
		end # PCIE x1 slot
		device ref pcie_rp4 on
			probe WIFI WIFI_PCIE_6
			probe WIFI WIFI_PCIE_7
			register "pcie_rp[PCH_RP(4)]" = "{
				.clk_src = 4,
				.clk_req = 4,
				.flags = PCIE_RP_CLK_REQ_DETECT | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_A11)"
				register "srcclk_pin" = "4"
				device pci 00.0 on end
			end
			chip drivers/wifi/generic
				register "add_acpi_dma_property" = "true"
				register "wake" = "GPE0_DW0_12" # GPP_A12
				use usb2_port7 as bluetooth_companion
				device pci 00.0 on end
			end
		end # discrete WLAN
		device ref pcie_rp5 on
			probe STORAGE STORAGE_NVME_GEN4
			probe STORAGE STORAGE_UNKNOWN
			register "pcie_rp[PCIE_RP(5)]" = "{
			.clk_src = 6,
			.clk_req = 6,
			.flags = PCIE_RP_CLK_REQ_DETECT | PCIE_RP_LTR | PCIE_RP_AER,
			}"
			chip soc/intel/common/block/pcie/rtd3
				register "is_storage" = "true"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_B10)"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_B09)"
				register "srcclk_pin" = "6"
				device generic 0 on end
			end
		end # Gen4 M.2 SSD
		device ref cnvi_wifi on
			probe WIFI WIFI_CNVI_6
			probe WIFI WIFI_CNVI_7
			chip drivers/wifi/generic
				register "wake" = "GPE0_PME_B0"
				register "add_acpi_dma_property" = "true"
				register "enable_cnvi_ddr_rfim" = "true"
				use cnvi_bluetooth as bluetooth_companion
				device generic 0 on end
			end
		end # CNVi

		device ref cnvi_bluetooth on
			probe WIFI WIFI_CNVI_6
			probe WIFI WIFI_CNVI_7
		end

		# NOTE: i2c0 is function 0; hence it needs to be enabled when any of i2c1-5 is enabled.
		# TPM device is under i2c3. Therefore, i2c0 needs to be enabled anyways.
		device ref i2c0 on end
		device ref i2c1 on end
		device ref i2c2 on end
		device ref i2c3 on
			chip drivers/i2c/tpm
				register "hid" = ""GOOG0005""
				register "irq" = "ACPI_IRQ_EDGE_LOW(GPP_D15_IRQ)"
				device i2c 50 on end
			end
		end # I2C3
		device ref i2c4 off
		end # I2C4
		device ref i2c5 on
			chip drivers/i2c/hid
				register "generic.hid" = ""HFW68H""
				register "generic.desc" = ""Hynitron TOUCHPAD""
				register "generic.irq" = "ACPI_IRQ_WAKE_LEVEL_LOW(GPP_F18_IRQ)"
				# NOTE: pmc_gpe0_dw0 will be overridden to GPP_F in variant.c.
				register "generic.wake" = "GPE0_DW0_18"
				register "generic.uid" = "5"
				register "generic.detect" = "1"
				register "hid_desc_reg_offset" = "0x20"
				device i2c 2c on
					probe TOUCHPAD TOUCHPAD_LPSS_I2C
				end
			end
		end # I2C5

		device ref gspi0 on
			chip drivers/spi/acpi
				register "name" = ""CRFP""
				register "hid" = "ACPI_DT_NAMESPACE_HID"
				register "uid" = "1"
				register "compat_string" = ""google,cros-ec-spi""
				register "irq" = "ACPI_IRQ_WAKE_LEVEL_LOW(GPP_D01_IRQ)"
				register "wake" = "GPE0_DW1_01"
				register "has_power_resource" = "true"
				register "reset_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_LOW(GPP_C15)"
				register "enable_gpio" = "ACPI_GPIO_OUTPUT_ACTIVE_HIGH(GPP_E19)"
				register "enable_delay_ms" = "3"
				device spi 0 on
					probe FP FP_PRESENT
				end
			end # FPMCU
		end

		device ref smbus on end
		device ref npk on end
		device ref hda off end
	end
end
